<Num>        ::= re("[0-9]|[1-9][0-9]+") ;
<Id>         ::= "x" | "y" | "z" ;

<Program>    ::= <Decls> <CalcExpr> ".";

<CalcExpr>   ::= "show" <Algebra>
                 | "simplify" <Algebra> ;

<Decls>      ::= <Decl>
                 | <Decls> <Decl> {100} ;
// For generation purposes, we generate exactly 100 Decls

<Ty>         ::= "int"
                 | "set" ;

<Decl>       ::= "let" <Ty> <Id> "be" <Expr> "." <EOL> ;

<Algebra>    ::= <Expr>
                 | <Predicate> ;

// <Expr0: "set">   ::= "{" <Id> ":" <Predicate> "}" ;
<Expr0: "set">   ::= "{" <Id> ":" "Predicate" "}" ;

<Expr0: "int">   ::= "(" <Expr: "int"> ")"
                     | 100 <Num>
                     | <Id> ;

<Expr1: "int">   ::= 2 <Expr0: "int">
                     | <Expr1: "int"> "*" <Expr0: "int"> ;

<Expr1: "set">   ::= 2 <Expr0: "set">
                     | <Expr1: "set"> "U" <Expr0: "set"> ;

<Expr: "int">    ::= 2 <Expr1: "int">
                     | <Expr: "int"> "+" <Expr1: "int">
                     | <Expr: "int"> "-" <Expr1: "int"> ;

<Expr: "set">    ::= 2 <Expr1: "set">
                     | <Expr: "set"> "U" <Expr1: "set"> ;

<Predicate0: "relation"> ::= <Expr: "int"> "<" <Expr: "int">
                             | <Expr: "int"> ">" <Expr: "int">
                             | <Expr: "int"> "=" <Expr: "int"> ;
                 
<Predicate0: "relation"> ::= <Expr: "int"> "@" <Expr: "set"> ;


<Predicate1> ::= "(" <Predicate> ")"
                 | 2 "!" <Predicate0>
                 | 2 <Predicate0> ;

<Predicate2>  ::= 10 <Predicate1>
                 | <Predicate2> "&" <Predicate1> ;

<Predicate>  ::= 10 <Predicate2>
                 | <Predicate> "|" <Predicate2> ;

<EOL>       ::= 1000 "\n" | "" ; // For generation purposes, make it looks better
