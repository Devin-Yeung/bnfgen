<Num>        ::= re("[0-9]|[1-9][0-9]+") ;
<Id>         ::= re("[[a-zA-Z]&&[^UI]]|[a-zA-Z][a-zA-Z]+") ;

<Program>    ::= <Decl> {100} <CalcExpr> ".";
// For generation purpose, we generate exactly 10 Decls

<CalcExpr>   ::= "show" <Algebra>
                 | "simplify" <Algebra> ;

<Decls>      ::= <Decl>
                 | <Decl> <Decl>;

<Decl>       ::= "let" "int" <Id> "be" <Num> "." <EOL>
                 | "let" "set" <Id> "be" <SetExpr> "." <EOL> ;

<Algebra>    ::= <ArithExpr>
                 | <SetExpr>
                 | <BoolExpr> ;

<ArithExpr0> ::= "(" <ArithExpr> ")"
                 | 2 <Num>
                 | 2 <Id> ;

<ArithExpr1> ::= 10 <ArithExpr0>
                 | <ArithExpr1> "*" <ArithExpr0> ;

<ArithExpr>  ::= 10 <ArithExpr1>
                 | <ArithExpr> "+" <ArithExpr1>
                 | <ArithExpr> "-" <ArithExpr1> ;

<BoolExpr>   ::= <Predicate> ;

<SetExpr0>   ::= "{" <Id> ":" <Predicate> "}" ;

// intersection has higher precedence than union
<SetExpr1>   ::= 5 <SetExpr0>
                 | <SetExpr> "I" <SetExpr0> ;

<SetExpr>    ::= 5 <SetExpr1>
                 | <SetExpr> "U" <SetExpr1> ;

<Predicate0> ::= <ArithExpr> "<" <ArithExpr>
                 | <ArithExpr> ">" <ArithExpr>
                 | <ArithExpr> "=" <ArithExpr>
                 | <Num> "@" <SetExpr> ; // TODO: (1) assoc unclear (2) allow set of sets?

<Predicate1> ::= "(" <Predicate> ")"
                 | "!" <Predicate0>
                 | <Predicate0> ;

<Predicate>  ::= 5 <Predicate1>
                 | <Predicate> "&" <Predicate1>
                 | <Predicate> "|" <Predicate1> ;

<EOL>       ::= 1000 "\n" | "" ; // For generation purpose, make it looks better
