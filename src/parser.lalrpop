use crate::token::Token;
use crate::span::Span;
use crate::grammar::{
    raw::RawGrammar,
    rule::Rule,
    alt::{Alternative, Limit},
    symbol::{Symbol, SymbolKind},
    production::WeightedProduction
};
use crate::regex::Regex;
use std::rc::Rc;

// grammar start
grammar;

// bridge the lexer
extern {
  type Location = usize;
  type Error = crate::error::Error;

  enum Token {
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "|" => Token::Or,
    "," => Token::Comma,
    "::=" => Token::Def,
    ":" => Token::Colon,
    ";" => Token::Semi,
    "<" => Token::LAngle,
    ">" => Token::RAngle,
    "re" => Token::Re,
    "str" => Token::Str(<String>),
    "id" => Token::Id(<String>),
    "int" => Token::Int(<usize>),
  }
}

pub RawGrammar: RawGrammar = {
    <_l: @L> <rules: Rule*> <_r: @R> => {
        RawGrammar {
            rules,
        }
    }
};

Rule: Rule = {
    <l: @L> "<" <name: "id"> ">" "::=" <alts: Alternatives> ";" <r: @R> => {
        Rule {
            name,
            production: WeightedProduction {
                alts,
            },
            span: Span::new(l, r),
        }
    }
};

Or<T>: Vec<T> = {
    <mut v:(<T> "|")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Alternatives = Or<Alternative>;

Alternative: Alternative = {
    <l: @L> <weight: "int"?> <symbols: Symbol+> <r: @R> => {
        Alternative {
            span: Span::new(l, r),
            invoke_limit: Limit::Unlimited,
            weight: weight.unwrap_or(1),
            symbols,
        }
    },

    <l: @L> <symbols: Symbol+> "{" <lo: "int"> <comma: ","?> <hi: "int"?> "}" <r: @R> => {
        Alternative {
            span: Span::new(l, r),
            invoke_limit: Limit::Limited {
                min: lo,
                max: hi.unwrap_or(lo),
            },
            weight: 1,
            symbols,
        }
    },
};

Symbol: Symbol = {
    <l: @L> <t: "str"> <r: @R> => {
        Symbol {
            kind: SymbolKind::Terminal(Rc::new(t)),
            span: Span::new(l, r),
        }
    },
    <l: @L> "<" <nt: "id"> ">" <r: @R> => {
        Symbol {
            kind: SymbolKind::NonTerminal(Rc::new(nt)),
            span: Span::new(l, r),
        }
    },
    // typed non-terminal
    <l: @L> "<" <nt: "id"> ":" <_ty: "str"> ">" <r: @R> => {
        Symbol {
            kind: SymbolKind::NonTerminal(Rc::new(nt)),
            span: Span::new(l, r),
        }
    },
    <l: @L> "re" "(" <re: "str"> ")" <r: @R> =>? {
        Ok(Symbol {
            kind: SymbolKind::Regex(
                Rc::new(
                    Regex::spanned(&re, l, r)?
                )
            ),
            span: Span::new(l, r),
        })
    },
};
